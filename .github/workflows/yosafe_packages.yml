name: yosafe_subpackage_1_workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]




jobs:
  install-dependencies:
    runs-on: ubuntu-latest

    env:
        YOSAFE_SUBPACKAGE_1_GITHUB_LINK: ${{ secrets.YOSAFE_SUBPACKAGE_1_GITHUB_LINK }}
        YOSAFE_SUBPACKAGE_2_GITHUB_LINK: ${{ secrets.YOSAFE_SUBPACKAGE_2_GITHUB_LINK }}
        YOSAFE_SUBPACKAGE_3_GITHUB_LINK: ${{ secrets.YOSAFE_SUBPACKAGE_3_GITHUB_LINK }}
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 
        
        

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Poetry
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        pipx install poetry
        poetry config virtualenvs.in-project true


    - name: Clone packages from github
      run: |
        cd src
        cd yosafe_packages
        git clone ${YOSAFE_SUBPACKAGE_1_GITHUB_LINK}
        git clone ${YOSAFE_SUBPACKAGE_2_GITHUB_LINK}
        git clone ${YOSAFE_SUBPACKAGE_3_GITHUB_LINK}
        cd ../..

    - name: Install toml package
      run: |
        poetry lock
        source .venv/bin/activate
        pip install toml
        python src/yosafe_packages/merge_function/merge_dependencies.py 
        pip -V
        pip list


    - name: Moving yosafe_packages/yosafe_subpackage_x/src/yosafe_subpackage_x to yosafe_packages/
      run: |
        cd src
        cd yosafe_packages
        mkdir temp_dir
        cp -r yosafe_subpackage_1/src/yosafe_subpackage_1/ temp_dir/
        cp -r yosafe_subpackage_2/src/yosafe_subpackage_2/ temp_dir/
        cp -r yosafe_subpackage_3/src/yosafe_subpackage_3/ temp_dir/
        rm -fr yosafe_subpackage_1
        rm -fr yosafe_subpackage_2
        rm -fr yosafe_subpackage_3
        mv temp_dir/* .
        rm -fr temp_dir
        ls
        cd ../..

    - name: Lock dependencies
      run: |
        poetry lock
        pip list

    - name: Cache dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: ./.venv
        key: venv-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install Poetry dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry install



    - name: Test with pytest
      run: |
        pip list
        poetry run pytest -sv


        
    - name: Build package
      run: |
        poetry lock
        poetry build

    - name: Extract package
      run: |
        cd dist
        ls
        unzip *.whl -d extracted_directory
        cd extracted_directory
        ls
        cd ../..

    - name: Publish package
      run: |
        continue-on-error: true
        pip install setuptools wheel twine
        twine upload dist/*
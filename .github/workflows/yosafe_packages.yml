name: yosafe_subpackage_1_workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  test-package-and-publish-to-pypi:
    runs-on: ubuntu-latest

    env:
        G_SUBPACKAGE_1_REPOSITORY: ${{ secrets.G_SUBPACKAGE_1_REPOSITORY }}
        G_SUBPACKAGE_2_REPOSITORY: ${{ secrets.G_SUBPACKAGE_2_REPOSITORY }}
        G_SUBPACKAGE_3_REPOSITORY: ${{ secrets.G_SUBPACKAGE_3_REPOSITORY }}
        G_NAME: ${{ secrets.G_NAME }}
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 
        
        

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Poetry
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        pipx install poetry
        poetry config virtualenvs.in-project true


    - name: Clone packages from github
      run: |
        cd src
        cd yosafe_packages
        git clone https://github.com/$G_NAME/$G_SUBPACKAGE_1_REPOSITORY.git
        git clone https://github.com/$G_NAME/$G_SUBPACKAGE_2_REPOSITORY.git
        git clone https://github.com/$G_NAME/$G_SUBPACKAGE_3_REPOSITORY.git
        cd ../..

    - name: Install toml package
      run: |
        poetry lock
        source .venv/bin/activate
        pip install toml
        pip install packaging
        python src/yosafe_packages/merge_function/merge_dependencies.py 
        #pip -V
        cat pyproject.toml
        pip uninstall -y toml
        pip uninstall -y packaging


    - name: Moving yosafe_packages/yosafe_subpackage_x/src/yosafe_subpackage_x to yosafe_packages/
      run: |
        cd src
        cd yosafe_packages
        mkdir temp_dir
        cp -r $G_SUBPACKAGE_1_REPOSITORY/src/$G_SUBPACKAGE_1_REPOSITORY/ temp_dir/
        cp -r $G_SUBPACKAGE_2_REPOSITORY/src/$G_SUBPACKAGE_2_REPOSITORY/ temp_dir/
        cp -r $G_SUBPACKAGE_3_REPOSITORY/src/$G_SUBPACKAGE_3_REPOSITORY/ temp_dir/
        rm -fr $G_SUBPACKAGE_1_REPOSITORY
        rm -fr $G_SUBPACKAGE_2_REPOSITORY
        rm -fr $G_SUBPACKAGE_3_REPOSITORY
        mv temp_dir/* .
        rm -fr temp_dir
        cd ../..


    - name: Install dependencies
      run: |
        poetry lock
        poetry install


    - name: Test with pytest
      run: |
        poetry run pytest -sv


    - name: Build package
      run: |
        poetry lock
        poetry build


    - name: Publish to PyPI
      continue-on-error: true
      run: |
        pip install setuptools wheel twine  
        twine upload dist/*